a <- read.csv2(file = file, as.is = TRUE, sep = "\t", fill = TRUE,
nrows = 1, quote = "", dec = ".", encoding = "latin1")
a <- names(a)
index <- match(a, attribute$names)
# read file
x <- read.csv2(file = file, as.is = TRUE, sep = "\t", fill = TRUE,
skip = 2, quote = "", dec = ".", col.names = attribute$alias[index],
colClasses = attribute$class[index], encoding = "latin1")
attribute$order[index]
x[, attribute$order[index]]
names(x)
cat(names(x))
cat(names(x), sep = ",")
cat(names(x), sep = "["],["]")
cat(names(x), sep = "\"",""\")
cat(names(x), sep = "\"",\"")
cat(names(x), sep = "\"",\""")
cat(names(x), sep = \"",\"")
cat(names(x), sep = "\""","\""")
cat(names(x), sep = '","')
x <- x[, c("obs_id","spec_id","spec_name","spec_latin","order","date",
"day","month","year","yday","pentade","decade","week",
"full_form","place","county","country","y","x","count",
"detail","atlas_code","altitude","hidden","id_rest_hab",
"id_acc_loc","id_obs_det","name","surname","second_hand",
"comment","hidden_comment")]
library(rornitho, lib.loc = "C:/Github/rornitho")
tab <- list.files("data/ornitho_monatsweise")
tab <- tab[c(1,47,48)]
tab <- paste0("data/ornitho_monatsweise/", tab)
dat <- lapply(tab, read.ornitho)
library(rornitho, lib.loc = "C:/Github/rornitho")
#library("rornitho")
setwd("F:\\Ornitho")
tab <- list.files("data/ornitho_monatsweise")
tab <- tab[c(1,47,48)]
tab <- paste0("data/ornitho_monatsweise/", tab)
dat <- lapply(tab, read.ornitho)
file = tab[1]
# predefine colums
data("attribute", envir = environment())
a <- read.csv2(file = file, as.is = TRUE, sep = "\t", fill = TRUE,
nrows = 1, quote = "", dec = ".", encoding = "latin1")
a <- names(a)
index <- match(a, attribute$names)
# read file
x <- read.csv2(file = file, as.is = TRUE, sep = "\t", fill = TRUE,
skip = 2, quote = "", dec = ".", col.names = attribute$alias[index],
colClasses = attribute$class[index], encoding = "latin1")
# adjust order
x <- x[, c("obs_id","spec_id","spec_name","spec_latin","order","date",
"day","month","year","yday","pentade","decade","week",
"full_form","place","county","country","y","x","count",
"detail","atlas_code","altitude","hidden","id_rest_hab",
"id_acc_loc","id_obs_det","name","surname","second_hand",
"comment","hidden_comment")]
x$date <- as.POSIXct(x$date, format = "%d.%m.%Y")
## species list
## ------------
def <- speclist(subsp, family, phenology)
speclist
## species list
## ------------
def <- speclist(subsp, family, phenology)
speclist
data(def, envir = environment())
s.null(family)
family
is.null(family)
if (!is.null(family)) {
fam <- unique(def$family)
family <- match.arg(family, fam, several.ok = TRUE)
def <- def[def$family %in% family, ]
}
unique(def$family)
View(def)
!x$spec_latin %in% def$latin
def <- speclist(subsp, family, phenology)
def <- speclist(subsp, family, phenology)
file = tab[1]
# predefine colums
data("attribute", envir = environment())
a <- read.csv2(file = file, as.is = TRUE, sep = "\t", fill = TRUE,
nrows = 1, quote = "", dec = ".", encoding = "latin1")
a <- names(a)
index <- match(a, attribute$names)
# read file
x <- read.csv2(file = file, as.is = TRUE, sep = "\t", fill = TRUE,
skip = 2, quote = "", dec = ".", col.names = attribute$alias[index],
colClasses = attribute$class[index], encoding = "latin1")
# adjust order
x <- x[, c("obs_id","spec_id","spec_name","spec_latin","order","date",
"day","month","year","yday","pentade","decade","week",
"full_form","place","county","country","y","x","count",
"detail","atlas_code","altitude","hidden","id_rest_hab",
"id_acc_loc","id_obs_det","name","surname","second_hand",
"comment","hidden_comment")]
x$date <- as.POSIXct(x$date, format = "%d.%m.%Y")
## species list
## ------------
def <- speclist(subsp, family, phenology)
speclist
data(def, envir = environment())
fam <- unique(def$family)
family
match.arg(family, fam, several.ok = TRUE)
def <- speclist(subsp, family, phenology)
View(def)
library(rornitho, lib.loc = "C:/Github/rornitho")
load("das_dat_objekt.rda")
ornitho map object
data(hessen_grid)
data(hessen_border)
data(hessen_river)
data(hessen_lake)
## create ornithoMap object
hessen_map <- ornithoMap(
grid4 = hessen_grid,
border = hessen_border,
river = hessen_river,
lake = hessen_lake)
ornithoPDF(dat)
ornithoPDF(dat, map = hessen_map)
ornithoPDF(dat, map = hessen_map, file = "test.pdf")
library(rornitho, lib.loc = "C:/Github/rornitho")
getCorners(sp = hessen_map)
source('C:/Github/rornitho/R/getCorners.R', encoding = 'UTF-8')
getCorners(sp = hessen_map)
slotNames(hessen_map)
hessen_map$border
hessen_map@border
bbox(hessen_map@border)
proj4string(hessen_border)
proj4string(hessen_grid)
proj4string(hessen_lake)
ornithoPDF
plotOrnitho
source('C:/Github/rornitho/R/getCorners.R', encoding = 'UTF-8')
sp <- hessen_map
xy <- bbox(sp@border)
rownames(xy) <- c("lat", "long")
## apply buffer
## ------------
a <- apply(xy, 1, diff)
a <- min(buffer * a * .5)
xy[, "min"] <- xy[, "min"] - a
xy[, "max"] <- xy[, "max"] + a
View(xy)
plotOrnithoPoints
sp <- hessen_map
xy <- sp@border
xy <- spTransform(xy,
CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
bbox(sp@border)
sp <- hessen_map
xy <- sp@border
xy <- spTransform(xy, CRS("+proj=longlat +ellps=WGS84"))
bbox(sp@border)
bbox
xy <- bbox(sp@border)
rownames(xy) <- c("lat", "long")
c(xy["long", "max"], xy["lat", "min"])
source('C:/Github/rornitho/R/getCorners.R', encoding = 'UTF-8')
source('C:/Github/rornitho/R/getCorners.R', encoding = 'UTF-8')
getCorners(sp = hessen_map)
xy <- getCorners(sp = hessen_map)
map
map <- openmap(upperLeft = xy$upperLeft, lowerRight = xy$lowerRight)
library("OpenStreetMap")
map <- openmap(upperLeft = xy$upperLeft, lowerRight = xy$lowerRight)
bbox
sp <- hessen_map
xy <- bbox(sp@border)
CRS(xy)
methods(bbox)
methods(bbox, class = 5)
methods(bbox)
methods(bbox, class = "Polygons-method")
methods(bbox, class = "Polygons")
methods(bbox, class = "polygons")
methods(bbox, class = "polygon")
methods(bbox, class = "Polygon")
methods(bbox, class = "Polygons-method")
methods(class = "Polygons-method")
getAnywhere(bbox)
sp:::bbox
showMethods("bbox")
methods(bbox, class = "Polygons)
"
)
sp <- hessen_map
sp@border
bbox(sp@border)
names(sp@border)
slotNames(sp@border)
sp@border@polygons
plotOrnithoPoints
xy <- spTransform(sp@border, CRS("+proj=longlat +ellps=WGS84"))
sp@border@polygons
bbox(sp@border)
xy <- spTransform(sp@border, CRS("+proj=longlat +ellps=WGS84"))
xy <- bbox(sp@border)
rownames(xy) <- c("lat", "long")
source('C:/Github/rornitho/R/getCorners.R', encoding = 'UTF-8')
xy <- getCorners(sp = hessen_map)
xy$upperLeft
xy$lowerRight
p
p
map <- openmap(upperLeft = xy$upperLeft, lowerRight = xy$lowerRight)
sp <- hessen_map
xy <- spTransform(sp@border, CRS("+proj=longlat +ellps=WGS84"))
plot(xy)
axis(1)
axis(2)
bbox(sp@border)
xy <- bbox(sp@border@polygons)
xy <- bbox(sp@border@polygon)
sp <- hessen_map
xy <- spTransform(sp@border, CRS("+proj=longlat +ellps=WGS84"))
xy
summary(xy)
xy <- summary(xy)
names(xy)
xy$bbox
sp <- hessen_map
xy <- spTransform(sp@border, CRS("+proj=longlat +ellps=WGS84"))
xy <- summary(xy)
xy <- xy$bbox
rownames(xy) <- c("lat", "long")
source('C:/Github/rornitho/R/getCorners.R', encoding = 'UTF-8')
getCorners(sp = hessen_map)
xy <- getCorners(sp = hessen_map)
library("OpenStreetMap")
map <- openmap(upperLeft = xy$upperLeft, lowerRight = xy$lowerRight)
plot(map)
raster(map)
library(raster)
raster(map)
proj4string(map)
plotOrnithoPoints
map <- openproj(x,
projection = CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
map <- openproj(map,
projection = CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
plot(map)
raster(map)
over(map, sp@border)
map <- raster(map)
over(map, sp@border)
xy <- getCorners(sp = hessen_map)
library("OpenStreetMap")
map <- openmap(upperLeft = xy$upperLeft, lowerRight = xy$lowerRight)
map <- openproj(map,
projection = CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
plot(map)
plot(hessen_map@border, add = T)
plot(hessen_map@border, add = T, backround = "white")
warnings()
plot(hessen_map@border, add = T, pbg = "white")
gIntersection(map, hessen_map@border)
library(rgeos)
gIntersection(map, hessen_map@border)
gIntersection(raster(map), hessen_map@border)
proj4string(map)
xy <- getCorners(sp = hessen_map)
rect(xy
rect(xy)
xy$upperLeft
backgr
xy
backgr <- rect(xleft = xy$upperLeft[2],
xright = xy$lowerRight[2],
ybottom = xy$lowerRight[1],
ytop = xy$upperLeft[1])
polygon(xy)
xy$upperLeft
xy$lowerRight
matrix(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$upperLeft[2], xy$lowerRight[1]))
xy$upperLeft
c(xy$upperLeft[1], xy$lowerRight[2])
polygon(matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$upperLeft[2], xy$lowerRight[1])), nrow = 2))
backgr <- Polygon(matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$upperLeft[2], xy$lowerRight[1])), nrow = 2))
matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$upperLeft[2], xy$lowerRight[1])), ncol = 2)
matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$upperLeft[2], xy$lowerRight[1])),
ncol = 2, byrow = F)
matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$upperLeft[2], xy$lowerRight[1])),
ncol = 2, byrow = T)
xy$upperLeft[2]
matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2]))
,
ncol = 2, byrow = T)
backgr <- Polygon(matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2])),
ncol = 2, byrow = T))
backgr <- Polygons(list(backgr),1)
backgr <- SpatialPolygons(list(backgr))
plot(backgr, col = "red")
plot(hessen_map@border, add = T, pbg = "white")
backgr <- openproj(backgr,
projection = CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
CRS(backgr)
sloNames(backgr)
slotNames(backgr)
backgr@proj4string <- CRS("+proj=longlat +datum=WGS84")
backgr <- openproj(backgr,
projection = CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
backgr
plot(backgr, col = "red")
backgr <- spTransform(backgr,
projection = CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
backgr <- spTransform(backgr,
CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
plot(backgr, col = "red")
plot(hessen_map@border, add = T, pbg = "white")
xy <- getCorners(sp = hessen_map)
backgr <- Polygon(matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2])),
ncol = 2, byrow = T))
backgr <- Polygons(list(backgr),1)
backgr <- SpatialPolygons(list(backgr))
backgr@proj4string <- CRS("+proj=longlat +datum=WGS84")
plot(backgr, col = "red")
plot(hessen_map@border, add = T, pbg = "white")
plot(hessen_map@border, add = T, col = "green")
backgr <- spTransform(backgr,
CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
plot(backgr, col = "red")
plot(hessen_map@border, add = T, col = "green")
over(map, sp@border)
xy <- getCorners(sp = hessen_map)
backgr <- Polygon(matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2])),
ncol = 2, byrow = T))
backgr <- Polygons(list(backgr),1)
backgr <- SpatialPolygons(list(backgr))
backgr
plotOrnithoPoints
xy <- getCorners(sp = hessen_map)
backgr <- Polygon(matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2])),
ncol = 2, byrow = T))
backgr <- Polygons(list(backgr),1)
backgr <- SpatialPolygons(list(backgr))
backgr@proj4string <- CRS("+proj=longlat +ellps=WGS84")
plot(backgr, col = "red")
plot(hessen_map@border, add = T, col = "green")
backgr <- spTransform(backgr,
CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"))
plot(backgr, col = "red")
plot(hessen_map@border, add = T, col = "green")
plot(backgr, col = "red")
plot(hessen_map@border, add = T, col = "green")
plot(hessen_map@border, add = T, border = "green")
xy <- getCorners(sp = hessen_map)
backgr <- Polygon(matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2])),
ncol = 2, byrow = T))
backgr <- Polygons(list(backgr),1)
backgr <- SpatialPolygons(list(backgr))
backgr@proj4string <- CRS("+proj=longlat +ellps=WGS84")
plot(backgr, col = "lightred")
plot(backgr, col = "lightgreen")
plot(hessen_map@border, add = T, border = "red", col = "red")
plot(backgr, col = "lightgreen")
plot(hessen_map@border, add = T, border = "red", col = "red")
hessen_map@border
backgr <- spTransform(backgr,
CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7"))
plot(backgr, col = "lightgreen")
plot(hessen_map@border, add = T, border = "red", col = "red")
plot(hessen_map@border
)
hessen_map@border
backgr
xy <- getCorners(sp = hessen_map)
matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2]))
ncol = 2, byrow = T)
matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2])),
ncol = 2, byrow = T)
xy <- getCorners(sp = hessen_map)
backgr <- matrix(c(xy$upperLeft, c(xy$upperLeft[1], xy$lowerRight[2]),
xy$lowerRight, c(xy$lowerRight[1], xy$upperLeft[2])),
ncol = 2, byrow = T)
backgr[,2:1]
backgr <- backgr[,2:1]
backgr <- Polygon(byckgr)
backgr <- Polygons(list(backgr),1)
backgr <- Polygon(backgr)
backgr <- Polygons(list(backgr),1)
backgr <- SpatialPolygons(list(backgr))
backgr@proj4string <- CRS("+proj=longlat +ellps=WGS84")
plot(backgr, col = "lightgreen")
plot(hessen_map@border, add = T, border = "red", col = "red")
backgr <- spTransform(backgr,
CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7"))
plot(backgr, col = "lightgreen")
plot(hessen_map@border, add = T, border = "red", col = "red")
map <- openmap(upperLeft = xy$upperLeft, lowerRight = xy$lowerRight)
map <- openproj(map,
projection = CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7"))
tt <- gIntersection(backgr, hessen_map@border)
hessen_map@border
tt <- over(backgr, hessen_map@border)
tt
clip(backgr, hessen_map@border)
tt <- over(hessen_map@border, backgr)
tt <- gIntersection(hessen_map@border, backgr, byid = TRUE, drop_lower_td = TRUE)
plot(tt)
tt <- gIntersection(hessen_map@border, backgr, byid = F, drop_lower_td = TRUE)
tt <- gIntersection(hessen_map@border, backgr, byid = T, drop_lower_td = TRUE)
tt <- gIntersection(backgr, hessen_map@border, byid = T, drop_lower_td = TRUE)
plot(tt, col = "green")
tt <- gIntersection(backgr, hessen_map@border, byid = T, drop_lower_td = F)
plot(tt, col = "green")
tt <- gIntersection(backgr, hessen_map@border, byid = F, drop_lower_td = F)
plot(tt, col = "green")
tt <- gIntersection(backgr, hessen_map@border, byid = T, drop_lower_td = T)
plot(tt, col = "green")
tt <- gIntersection(backgr, hessen_map@border, byid = F, drop_lower_td = T)
hessen_map@border
plot(hessen_map@border)
tt <- crop(backgr, hessen_map@border)
tt <- crop(backgr, hessen_map@border, snap = "out")
tt <- overlay(backgr, hessen_map@border)
backgr %over% hessen_map@border
tt <- over(backgr, hessen_map@border)
tt
install.packages("polyclip")
library(polyclip)
tt <- polyclip(backgr, hessen_map@border, op = "minus")
slotNames(backgr)
backgr@polygons
backgr@polygons@coords
backgr@polygons@coords
slotNames(backgr@polygons)
slotNames(backgr@polygons)
backgr@polygons
tt <- polyclip(backgr@polygons, hessen_map@border@polygons, op = "minus")
remove.packages("polyclip")
tt <- crop(backgr, hessen_map@border)
tt <- crop(hessen_map@border, backgr)
plot(tt, col = "green")
tt <- crop(hessen_map@border, backgr, snap = "near")
plot(tt, col = "green")
hessen_map@border
slotNames(hessen_map@border)
names(hessen_map@border)
names(hessen_map@border)[7]
hessen_map@border$Name_admin
plot(backgr, col = "lightgreen")
plot(hessen_map@border[1,], add = T, border = "red")
tt <- crop(backgr, hessen_map@border[1,])
plot(tt, col = "green")
tt <- gIntersection(backgr, hessen_map@border[1,])
plot(hessen_map@border)
plot(tt, col = "green")
tt <- gIntersection(hessen_map@border[1,], backgr)
plot(tt, col = "green")
tt <- gIntersection(hessen_map@border[1,], backgr)
plot(tt, col = "green")
tt <- gIntersection(hessen_map@border[1,], backgr, drop_lower_td = F)
plot(tt, col = "green")
tt <- gIntersection(hessen_map@border[1,], backgr, drop_lower_td = T)
plot(tt, col = "green")
tt <- gIntersection(backgr, hessen_map@border[1,], drop_lower_td = T)
plot(tt, col = "green")
tt <- gIntersection(backgr, hessen_map@border[1,], drop_lower_td = F)
plot(tt, col = "green")
plot(map)
plot(hessen_map@border, add = T, border = "red")
plot(hessen_map@border, add = T, border = "red", fill = "white")
ornithoMap
crop.grid
source('C:/Github/rornitho/R/getCorners.R', encoding = 'UTF-8')
proj4string
library(rornitho, lib.loc = "C:/Github/rornitho")
library(rornitho, lib.loc = "C:/Github/rornitho")
library(rornitho, lib.loc = "C:/Github/rornitho")
library(rornitho)
setwd("~/r/ornitho")
file <- list.files("data/ornitho_daten",
#                    "2014",
full.names = TRUE)
x <- read.ornitho(file, family = "Falconidae")
x
library(rornitho)
setwd("~/r/ornitho")
sset <- "falconidae"
data(hessen_map)
load(paste("data/", sset, ".rda", sep = ""))
fn <- paste("figs/", sset, ".pdf", sep = "")
ornithoPDF(x,
map = hessen_map,
show.hidden = FALSE,
rasterize = 100,
raster.model = "maxInd",
from = "Jul", to = "Jun",
col = c("skyblue", "red"),
gridcol = "grey25",
reporter = TRUE,
file = fn)
system(paste("open", fn))
