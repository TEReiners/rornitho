axis(4)
# add axis title
mtext("GDM", side = 2, cex = 0.75, line = 2.5)
mtext("Summe von GDM (Balken) und Beob. (Linie) pro Dekade", side = 3, cex = 0.9, line = 1)
mtext("Beobachtungen", side = 4, cex = 0.75,line = 2.5)
time <- "pentade"
od <- obsSiteTime(x, time = time)
gdm <- maxSiteTime(x, time = time)
gdm <- colSums(gdm)
# count maxima per decade
par(mar = c(3, 5, 4, 5))
par(mgp = c(0,0.6,0))
brpl <- barplot(matrix(gdm, ncol = 12), beside = TRUE, col = "darkgreen",
space = c(.2, .7),axes=F, ylim = range(pretty(c(0, gdm))),
names.arg = c("Jan", "Feb", "Mär", "Apr", "Mai","Jun",
"Jul", "Aug", "Sep", "Okt", "Nov", "Dez"))
axis(2) #, at = pretty(c(0, gdm)), labels = pretty(c(0, gdm)))
#  format(pos,digits = 0, scientific = F, big.mark = ".")
# add line for number of observations
par(new=TRUE)
plot(as.vector(brpl),od, ylab="", xlab="",
col = 259, type = "l", axes = FALSE, ylim = range(pretty(c(0, od))),
lwd = 2.5)
axis(4)
# add axis title
mtext("GDM", side = 2, cex = 0.75, line = 2.5)
mtext("Summe von GDM (Balken) und Beob. (Linie) pro Dekade", side = 3, cex = 0.9, line = 1)
mtext("Beobachtungen", side = 4, cex = 0.75,line = 2.5)
time <- "decade"
od <- obsSiteTime(x, time = time)
gdm <- maxSiteTime(x, time = time)
gdm <- colSums(gdm)
# count maxima per decade
par(mar = c(3, 5, 4, 5))
par(mgp = c(0,0.6,0))
brpl <- barplot(matrix(gdm, ncol = 12), beside = TRUE, col = "darkgreen",
space = c(.2, .7),axes=F, ylim = range(pretty(c(0, gdm))),
names.arg = c("Jan", "Feb", "Mär", "Apr", "Mai","Jun",
"Jul", "Aug", "Sep", "Okt", "Nov", "Dez"))
axis(2) #, at = pretty(c(0, gdm)), labels = pretty(c(0, gdm)))
#  format(pos,digits = 0, scientific = F, big.mark = ".")
# add line for number of observations
par(new=TRUE)
plot(as.vector(brpl),od, ylab="", xlab="",
col = 259, type = "l", axes = FALSE, ylim = range(pretty(c(0, od))),
lwd = 2.5)
axis(4)
# add axis title
mtext("GDM", side = 2, cex = 0.75, line = 2.5)
mtext("Summe von GDM (Balken) und Beob. (Linie) pro Dekade", side = 3, cex = 0.9, line = 1)
mtext("Beobachtungen", side = 4, cex = 0.75,line = 2.5)
View(x)
hist(x$altitude)
x <- subset(x,altitude >= as.numeric(-50))
hist(x$altitude)
hist
hist(x$altitude)
alt.min = 0; alt.max = 1100
seq(from = alt.min, to = alt.max, by = 10)
sort(x$altitude)
alti <- sort(x$altitude)
cut(alti, breaks = 10)
plot(cut(alti, breaks = 10))
alti <- cut(alti, breaks = 15)
plot(alti)
plot(alti, xlim = c(alt.min,alt.max))
plot(alti)
table(alti)
alti <- table(alti)
names(alti)
alti <- sort(x$altitude)
cut(alti, breaks = 15, labels = F)
alti <- cut(alti, breaks = 15)
alti <- table(alti)
names(alti)
gsub("(","",names(alti))
gsub("[(]","",names(alti))
gsub("[]]","",names(alti))
names(alti) <- gsub("[(]","",names(alti))
names(alti) <- gsub("[]]","",names(alti))
names(alti)
names(alti) <- gsub(",","-",names(alti))
names(alti)
alti <- sort(x$altitude)
alt.int = 50
seq(alt.min, alt.max, alt.int)
cc <- seq(alt.min, alt.max, alt.int)
alti < cc
alti <- sort(x$altitude)
sapply(cc, function(x){return(length(x <= y))}, y = alti)
sapply(cc, function(x){x <= y}, y = alti)
cc
d
d <- cc[1]
d - alt.int
cc <- seq(alt.min + alt.int, alt.max, alt.int)
d <- cc[1]
d - alt.int
alti >= (d - alt.int)
length(alti[alti >= (d - alt.int) & alti > d])
length(alti[alti >= (d - alt.int) & alti < d])
countAlti <- function(d, alti = alti, alt.int = alt.int){
return(length(alti[alti >= (d - alt.int) & alti < d]))
}
sapply(cc, countAlti, alti = alti, alt.int = alt.int)
x <- read.ornitho("E:\\Ornitho\\data\\export_27102014_221710.txt")
alt.min = 0; alt.max = 1100; alt.int = 50
alti <- sort(x$altitude)
# create cutting sequence
d <- seq(alt.min + alt.int, alt.max, alt.int)
countAlti <- function(d, alti = alti, alt.int = alt.int){
return(length(alti[alti >= (d - alt.int) & alti < d]))
}
alti <- sapply(cc, countAlti, alti = alti, alt.int = alt.int)
cc <- seq(alt.min + alt.int, alt.max, alt.int)
countAlti <- function(d, alti = alti, alt.int = alt.int){
return(length(alti[alti >= (d - alt.int) & alti < d]))
}
alti <- sapply(cc, countAlti, alti = alti, alt.int = alt.int)
barplot(alti)
gg <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F,
cex.lab = 1, xlim=rev(c(0,0.5)))
gg <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F,
cex.lab = 1)
gg <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,1000)),
cex.lab = 1)
gg <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,100000)),
cex.lab = 1)
gg <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti))),
cex.lab = 1)
box()
gg <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1)
box()
axis(1)
axis(2)
cc
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1)
box()
axis(1)
cc
brpl
axis(3, at = brpl, labels = cc)
axis(3, at = brpl[,1], labels = cc)
axis(4, at = brpl[,1], labels = cc)
axis(4, at = brpl[,1], labels = cc, las = 2)
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1)
box()
axis(1)
axis(4, at = brpl[,1]+brpl[1,1], labels = cc, las = 2)
alt.min = 0; alt.max = 1000; alt.int = 50
# create vector with altitudes
alti <- sort(x$altitude)
# create cutting sequence
cc <- seq(alt.min + alt.int, alt.max, alt.int)
countAlti <- function(d, alti = alti, alt.int = alt.int){
return(length(alti[alti >= (d - alt.int) & alti < d]))
}
alti <- sapply(cc, countAlti, alti = alti, alt.int = alt.int)
# start plotting
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1)
box()
axis(1)
axis(4, at = brpl[,1]+brpl[1,1], labels = cc, las = 2)
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1, yaxs = "i")
box()
axis(1)
axis(4, at = brpl[,1]+brpl[1,1], labels = cc, las = 2)
# start plotting
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1, yaxs = "i")
box()
axis(1)
axis(4, at = brpl[,1]+ (brpl[1,1]-brpl[2,1])2, labels = cc, las = 2)
axis(4, at = brpl[,1]+ (brpl[1,1]-brpl[2,1])/2, labels = cc, las = 2)
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1, yaxs = "i")
box()
axis(1)
axis(4
)
brpl[,1]+ (brpl[1,1]-brpl[2,1])/2
brpl[,1]
axis(4, at = brpl[,1] + ((brpl[1,1]-brpl[2,1])/2), labels = cc, las = 2)
brpl[1,1]-brpl[2,1])/2
(brpl[1,1]-brpl[2,1])/2
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1, yaxs = "i")
box()
axis(1)
axis(4, at = brpl[,1] + ((brpl[2,1]-brpl[1,1])/2), labels = cc, las = 2)
brpl[,1] + ((brpl[2,1]-brpl[1,1])/2)
cc
alt.min = 0; alt.max = 1000; alt.int = 50
# create vector with altitudes
alti <- sort(x$altitude)
# create cutting sequence
cc <- seq(alt.min + alt.int, alt.max, alt.int)
countAlti <- function(d, alti = alti, alt.int = alt.int){
return(length(alti[alti >= (d - alt.int) & alti < d]))
}
alti <- sapply(cc, countAlti, alti = alti, alt.int = alt.int)
# start plotting
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1, yaxs = "i")
box()
axis(1)
axis(4, at = brpl[,1] + ((brpl[2,1]-brpl[1,1])/2), labels = cc, las = 2)
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,alt.max)),
cex.lab = 1, yaxs = "i")
alt.max
# start plotting
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1, yaxs = "i")
box()
axis(1)
length(alti)
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1, yaxs = "i", ylim = c(0.5,length(alti)+0.5))
box()
axis(1)
axis(4, at = brpl[,1] + ((brpl[2,1]-brpl[1,1])/2), labels = cc, las = 2)
# start plotting
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1,  ylim = c(0.5,length(alti)+0.5))
box()
axis(1)
axis(4, at = brpl[,1] + ((brpl[2,1]-brpl[1,1])/2), labels = cc, las = 2)
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1,  ylim = c(0,length(alti)+0.5))
box()
# start plotting
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1,  ylim = c(0.5, length(alti)+0.5))
box()
axis(1)
axis(4, at = brpl[,1] + ((brpl[2,1]-brpl[1,1])/2), labels = cc, las = 2)
length(cc)
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1,  ylim = c(0.5, length(cc)+0.5))
box()
brpl <- barplot(alti, col = "darkgreen", horiz=TRUE,axes =F, xlim= rev(c(0,max(alti)*1.1)),
cex.lab = 1)
box()
axis(1)
axis(4, at = brpl[,1] + ((brpl[2,1]-brpl[1,1])/2), labels = cc, las = 2)
mtext("Beob. [n]", side = 1, line = 1.5, cex = 0.6)
mtext("Höhenverteilung", side = 3, line = 1.3, cex = 0.9)
shape <- readShapePoly("data/Hessen_mit_Gemeindegrenzen.shp")
library(maptools)
country <- readShapePoly("data/Hessen_mit_Gemeindegrenzen.shp")
country <- readShapePoly("E:\\Ornitho\\data\\data\\Hessen_mit_Gemeindegrenzen.shp")
country <- readShapePoly("E:\\Ornitho\\data\\Hessen_mit_Gemeindegrenzen.shp")
proj4string(shape)
proj4string(country)
proj4string(country) <- CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs")
CRS(country)
proj4string(country)
proj4string(country) == "+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"
proj4string(country) != "+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs"
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
gsub
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
x <- tab
sort(unique(x$spec_name))
x <- tab
rnorm(10)
test.frame <- data.frame(zeile1 = seq(1,10,10),
zeile2 = rnorm(10))
save(test.frame, file = "test.frame.rda")
x
library(ornitho)
save(test.frame, file = "data/test.frame.rda")
library(ornitho)
library(ornitho)
library(ornitho)
tab <- read.ornitho("E:\\Ornitho\\data\\export_27102014_221710.txt")
library(ornitho)
tab <- read.ornitho("E:\\Ornitho\\data\\export_27102014_221710.txt")
tab_org <- tab
plotOrnithoAltitude(x = tab, alt.max = 1200, alt.int = 50, alt.min = 0)
plotOrnithoAltitude(x = tab, alt.max = 1100, alt.int = 50, alt.min = 0)
plotOrnithoAltitude(x = tab, alt.max = 1000, alt.int = 50, alt.min = 0)
plotOrnithoPheno(x = tab, time = "decade")
x <- tab
# change species names
x$spec_name[grep("Weidenmeise", x$spec_name)] <- "Weidenmeise"
x$spec_name[grep("Weißwangengans", x$spec_name)] <- "Weißwangengans"
x$spec_name[grep("bernicla", x$spec_name)] <- "Dunkelbäuchige Ringelgans"
x$spec_name[grep("Straßentaube", x$spec_name)] <- "Straßentaube"
x$spec_name[grep("Bluthänfling", x$spec_name)] <- "Bluthänfling"
x$spec_name[grep("soemmerringii", x$spec_name)] <- "Dohle (ssp. soemmerringii)"
x$spec_name[x$spec_name == "Stieglitz (Distelfink)"] <- "Stieglitz"
x$spec_name[x$spec_name == "Gebirgsstelze (Bergstelze)"] <- "Gebirgsstelze"
x$spec_name[x$spec_name == "Gimpel (Dompfaff)"] <- "Gimpel"
x$spec_name[x$spec_name == "Zilpzalp (ssp. tristis), Taigazilpzalp"] <- "Zilpzalp (ssp. tristis)"
x$spec_name[x$spec_name == "Saatgans (ssp. rossicus), Tundrasaatgans"] <- "Tundrasaatgans"
x$spec_name[x$spec_name == "Birkenzeisig (ssp. cabaret), Alpenbirkenzeisig"] <- "Birkenzeisig"
x$spec_name[x$spec_name == "Birkenzeisig (ssp. flammea), Taigabirkenzeisig"] <- "Taigabirkenzeisig"
x$spec_name[x$spec_name == "Gimpel (ssp. pyrrhula), Trompetergimpel"] <- "Trompetergimpel"
x$spec_name[x$spec_name == "Jagdfasan (Fasan)"] <- "Jagdfasan"
x$spec_name[x$spec_name == "Stockente, Bastard, fehlfarben"] <- "Stockente, Bastard"
x$spec_name[x$spec_name == "Schwarzschwan (Trauerschwan)"] <- "Schwarzschwan"
x$spec_name[x$spec_name == "Schwarzkehlchen (Sibirisches), Pallasschwarzkehlchen"] <- "Pallasschwarzkehlchen"
x$spec_name[x$spec_name == "Saatgans (ssp. fabalis), Waldsaatgans"] <- "Waldsaatgans"
x$spec_name[x$spec_name == "Schafstelze (flava), Wiesenschafstelze"] <- "Wiesenschafstelze"
x$spec_name[x$spec_name == "Schafstelze (ssp. thunbergi), Thunbergschafstelze"] <- "Thunbergschafstelze"
x$spec_name[x$spec_name == "Schafstelze (ssp. flava), Wiesenschafstelze"] <- "Wiesenschafstelze"
x$spec_name[x$spec_name == "Schafstelze (ssp. flavissima), Gelbkopf-Schafstelze"] <- "Gelbkopf-Schafstelze"
x$spec_name[x$spec_name == "Pfeifente (Nordamerikanische), Kanadapfeifente"] <- "Kanadapfeifente"
x$spec_name[x$spec_name == "Heringsmöwe (ssp. fuscus), Baltische Heringsmöwe"] <- "Heringsmöwe (ssp. fuscus)"
x$spec_name[x$spec_name == "Tannenhäher (ssp. macrorhynchos), Sibirischer"] <- "Tannenhäher (ssp. macrorhynchos)"
x$spec_name[x$spec_name == "Heringsmöwe (ssp. intermedius)"] <- "Heringsmöwe (ssp.intermedius)"
sort(unique(x$spec_name))
raus <- c("unbestimmt", "oder", "Art","-_x_")
raus <- paste(raus, collapse = "|")
x <- x[-grep(raus, x$spec_name), ]
x <- x[!is.na(x$spec_name), ]
sort(unique(x$spec_name))
library(rgdal)
setwd("E:\\Ornitho\\shapes")
seen <- readShapePoly("data/stillgewaesser_Hessen_neu.shp")
library(maptools)
seen <- readShapePoly("data/stillgewaesser_Hessen_neu.shp")
setwd("E:\\Ornitho\\shapes")
seen <- readShapePoly("data/stillgewaesser_Hessen_neu.shp")
setwd("E:\\Ornitho")
seen <- readShapePoly("shapes/stillgewaesser_Hessen_neu.shp")
setwd("E:\\Arbeit\\2014\\2014_HGON\\HGON_Brutvogel_Ornitho\\data")
seen <- readShapePoly("stillgewaesser_Hessen_neu.shp")
proj4string(seen) <- CRS(" +proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs")
save(seen, file = "E:/Ornitho/package_ornitho/ornitho/data/hessen_lakes.rda")
country <- readShapePoly("E:\\Ornitho\\data\\Hessen_mit_Gemeindegrenzen.shp")
proj4string(country) <- CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs")
save(country, file = "E:/Ornitho/package_ornitho/ornitho/data/hessen_border.rda")
save(seen, file = "E:/Ornitho/package_ornitho/ornitho/data/hessen_lake.rda")
fluesse <- readShapeLines("gewaesser.shp")
proj4string(fluesse) <- CRS("+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +datum=potsdam +units=m +no_defs")
save(fluesse, file = "E:/Ornitho/package_ornitho/ornitho/data/hessen_river.rda")
x <- "hessen"
plot(paste0("data/", x,".rda"), lwd = .1,bg = NA, border = "black")
paste0("data/", x,".rda")
plot(paste0("data/", x,"_border.rda"), lwd = .1,bg = NA, border = "black")
plot(paste0(x,"_border.rda"), lwd = .1,bg = NA, border = "black")
x <- load(paste0("data/",x,"_border.rda"))
paste0("data/",x,"_border.rda")
getwd()
setwd("E:/Ornitho/package_ornitho/ornitho")
getwd()
plot( paste0("data/",x,"_border.rda") , lwd = .1 ,bg = NA, border = "black")
x <- load(paste0("data/",x,"_border.rda"))
x <- "hessen"
paste0("data/",x,"_border.rda")
plot(load(paste0("data/",x,"_border.rda")) , lwd = .1 ,bg = NA, border = "black")
x <- "hessen"
paste0("data/",x,"_border.rda")
load(paste0("data/",x,"_border.rda"))
hessen_border <- country
save(hessen_border, file = "E:/Ornitho/package_ornitho/ornitho/data/hessen_border.rda")
x <- "hessen"
load(paste0("data/",x,"_border.rda"))
x <- load(paste0("data/",x,"_border.rda"))
plot(x , lwd = .1 ,bg = NA, border = "black")
load(paste0("data/",x,"_border.rda"))
x <- "hessen"
load(paste0("data/",x,"_border.rda"))
plot( hessen_border , lwd = .1 ,bg = NA, border = "black")
plot( load(paste0("data/",x,"_border.rda")) , lwd = .1 ,bg = NA, border = "black")
x <- "hessen"
load(paste0("data/",x,"_border.rda"))
plot(paste0("data/",x,"_border.rda") , lwd = .1 ,bg = NA, border = "black")
plot(get(paste0("data/",x,"_border")) , lwd = .1 ,bg = NA, border = "black")
plot(get(paste0(x,"_border")) , lwd = .1 ,bg = NA, border = "black")
plot(paste0(x,"_border"), lwd = .1 ,bg = NA, border = "black")
load(paste0("data/",x,"_lake.rda"))
hessen_lake <- fluesse
hessen_lake <- seen
save(hessen_lake, file = "E:/Ornitho/package_ornitho/ornitho/data/hessen_lake.rda")
hessen_river <- fluesse
save(hessen_river, file = "E:/Ornitho/package_ornitho/ornitho/data/hessen_river.rda")
rm(hessen_border, hessen_lake, hessen_river, fluesse, country, seen)
x <- "hessen"
# add base map
load(paste0("data/",x,"_border.rda"))
plot(get(paste0(x,"_border")), lwd = .1 ,bg = NA, border = "black")
# add lakes
load(paste0("data/",x,"_lake.rda"))
plot(get(paste0(x,"_lake")), col ="blue",add = TRUE)
# add rivers
load(paste0("data/",x,"_river.rda"))
plot(get(paste0(x,"_river")),  add = TRUE, col = "blue",bg = NA, lwd = 0.01)
rm(hessen_border)
data(paste0(x,"_border.rda"))
paste0(x,"_border.rda")
data(paste0(x,"_border"))
data(get(paste0(x,"_border")))
data(paste0(x,"_border.rda"))
paste0(x,"_border.rda")
data(paste0(x,"_border"))
data(paste0(x,"_border"), package = ornitho)
data()
data(paste0(x,"_border"), package = "ornitho")
data(hessen_border)
data(paste0(x,"_border"))
data(assign(paste0(x,"_border")))
data(list = paste0(x,"_border"))
x <- "hessen"
rm(hessen_border)
x <- "hessen"
data(list = paste0(x,"_border"))
plot(get(paste0(x,"_border")), lwd = .1 ,bg = NA, border = "black")
# add lakes
# add lakes
data(list = paste0(x,"_lake"))
plot(get(paste0(x,"_lake")), col ="blue",add = TRUE)
# add rivers
data(list = paste0(x,"_river"))
plot(get(paste0(x,"_river")),  add = TRUE, col = "blue",bg = NA, lwd = 0.01)
#rm(hessen_border)
library(ornitho)
library(ornitho)
layout(matrix(c(1, 1,
2, 2,
3, 3,
4, 4), 4, 2, byrow = TRUE),
heights = c(1,1,6,3), widths = c(3,1))
layout.show(5)
layout(matrix(c(1, 1,
2, 2,
3, 3,
4, 5), 4, 2, byrow = TRUE),
heights = c(1,1,6,3), widths = c(3,1))
layout.show(5)
par(mar = rep(0.2,4))
plot.new(1:10,1:10, xlab = "", ylab = "", axis = F)
plot.new(0:10 ~ 0:10, xlab = "", ylab = "", axis = F)
plot.new(0:10 ~ 0:10, xlab = "", ylab = "", axes = F)
plot(0:10 ~ 0:10, xlab = "", ylab = "", axes = F)
plot(0:10, 0:10, xlab = "", ylab = "", axes = F)
plot(0:10, 0:10, xlab = "", ylab = "", axes = F, type = "n")
plotOrnithoAltitude
library(ornitho)
install.packages("Rtools")
library(ornitho)
source('H:/Ornitho/package_ornitho/ornitho/R/plotOrnithoFirst.R')
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
source('H:/Ornitho/package_ornitho/ornitho/R/plotOrnithoFirst.R')
library(ornitho)
library(ornitho)
library(ornitho)
install.packages("codetools")
source('H:/Ornitho/package_ornitho/ornitho/R/plotOrnithoFirst.R')
source('H:/Ornitho/package_ornitho/ornitho/R/plotOrnithoFirst.R')
library(ornitho)
source('H:/Ornitho/package_ornitho/ornitho/R/plotOrnithoFirst.R')
library(ornitho)
source('H:/Ornitho/package_ornitho/ornitho/R/plotOrnithoFirst.R')
library(ornitho)
plotOrnithoMap
library(ornitho)
library(ornitho)
library(ornitho)
plot(0:10 ~ 0:10, xlab = "", ylab = "", type = "n", axes = F)
plot(0:10 ~ 0:10, xlab = "", ylab = "", type = "n", axis = F)
plot(0:10, 0:10, xlab = "", ylab = "", type = "n", axis = F)
plot(0:10, 0:10, xlab = "", ylab = "", type = "n", axes = F)
dis
dis <- 10/n
dis <- 1
10/12
10/12 * 1:10
n = 10
rev(10/n+2 * 1:n)
rev((10/n+2) * 1:n)
rev((10/n+2) * 1:n)
10/n+2
rev((10/n+2) * (1:n))
(1:n)
(10/n+2)
rev((10/(n+2)) * (1:n))
library(ornitho)
library(ornitho)
library(ornitho)
source('H:/Ornitho/package_ornitho/ornitho/R/textOrnithoDate.R')
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
library(ornitho)
